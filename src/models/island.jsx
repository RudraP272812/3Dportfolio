/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: nimzu (https://sketchfab.com/nimzuk)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/foxs-islands-163b68e09fcc47618450150be7785907
Title: Fox's islands
*/

import React, { useRef,useEffect } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame, useThree } from "@react-three/fiber";
import{a} from '@react-spring/three'

import islandScene from '../assets/3d/lowpoly_island.glb'
const Island = ({isRotating,setisRotating,setCurrentStage, ...props})=> {

  const islandRef = useRef();
  const{gl,viewport} = useThree();

  const lastX = useRef(0);
  const rotationSpeed = useRef(0);
  const damingFactor = 0.95;

  
  const handlePointerDown = (e)=>{
    e.stopPropagation();
    e.preventDefault();
    setisRotating(true);
    const clientX = e.touches ?e.touches[0].clientX:e.clientX;
    lastX.current = clientX;
  }
  const handlePointerUp = (e)=>{
    e.stopPropagation();
    e.preventDefault();
    setisRotating(false);
    
  }
  const handlePointerMove = (e)=>{
    e.stopPropagation();
    e.preventDefault();
    if(isRotating)
    {
    const clientX = e.touches ?e.touches[0].clientX:e.clientX;
    const delta = (clientX - lastX.current)/viewport.width;
    islandRef.current.rotation.y +=delta*0.01*Math.PI;
    lastX.current = clientX;
    rotationSpeed.current = delta*0.01*Math.PI;
    }
  }
  const handleKeyDown = (e)=>{
    if (e.key === 'ArrowLeft') {
      if(!isRotating) setisRotating(true);
      islandRef.current.rotation.y += 0.01 *Math.PI;
      rotationSpeed.current= 0.0125;
    }else if (e.key === 'ArrowRight') {
      if(!isRotating) setisRotating(true);
      islandRef.current.rotation.y -= 0.01 *Math.PI;
    }
  }
  const handleKeyUp = (e)=>{
    if (e.key === 'ArrowLeft'||e.key === 'ArrowRight') {
      setisRotating(false);
    }
  }

  useEffect(() =>{
    const canvas = gl.domElement;
    canvas.addEventListener('pointerdown',handlePointerDown);
    canvas.addEventListener('pointerup',handlePointerUp);
    canvas.addEventListener('pointermove',handlePointerMove);
    document.addEventListener('keydown',handleKeyDown);
    document.addEventListener('keyup',handleKeyUp);

    return()=>{
    canvas.removeEventListener('pointerdown',handlePointerDown);
    canvas.removeEventListener('pointerup',handlePointerUp);
    canvas.removeEventListener('pointermove',handlePointerMove);
    document.removeEventListener('keydown',handleKeyDown);
    document.removeEventListener('keyup',handleKeyUp);

    }
  },[gl,handlePointerDown,handlePointerUp,handlePointerMove])

  useFrame(()=>{
    
    if(!isRotating){
      rotationSpeed.current *= damingFactor;
      if(Math.abs(rotationSpeed.current)<0.001)
      {
        rotationSpeed.current = 0;
      } 
      islandRef.current.rotation.y +=  rotationSpeed.current;
    }
    else{
        const rotation = islandRef.current.rotation.y;
        const normalizedRotation =
        ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);

       
      switch (true) {
        case normalizedRotation >= 5.45 && normalizedRotation <= 5.85:
          setCurrentStage(4);
          break;
        case normalizedRotation >= 0.85 && normalizedRotation <= 1.3:
          setCurrentStage(3);
          break;
        case normalizedRotation >= 2.4 && normalizedRotation <= 2.6:
          setCurrentStage(2);
          break;
        case normalizedRotation >= 4.25 && normalizedRotation <= 4.75:
          setCurrentStage(1);
          break;
        default:
          setCurrentStage(null);
      }
    }
  });
  const { nodes, materials } = useGLTF(islandScene);
  return (
    <a.group ref={islandRef} scale={[0.5, 0.5, 0.5]} {...props}>
      
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_2.geometry}
        material={materials["Scene_-_Root"]}
        rotation={[-Math.PI / 2, 0, 0]}
        scale={[0.2,0.2,0.2]}
      /> 
        
       
    </a.group>
  );
}
export default Island;
